#!/bin/bash

# Este script crea un nuevo directorio de proyecto con una estructura b√°sica
# y lo inicializa como un repositorio Git.

# 1. Verifica si se ingres√≥ un nombre de proyecto
if [ -z "$1" ]; then
    echo "‚ö†Ô∏è  Uso: ./crear_proyecto.sh <NombreDeMiProyecto>"
    exit 1
fi

PROYECTO=$1
# La ruta del gitignore global se mantiene, ya que es una configuraci√≥n de usuario
GITIGNORE_GLOBAL="$HOME/.gitignore_global"
# La carpeta donde se crear√°n los proyectos (se mantiene fija en ~/Desktop/GitHub)
PROYECTOS_DIR="$HOME/Desktop/GitHub"

echo "‚ú® Creando proyecto '$PROYECTO' en '$PROYECTOS_DIR'..."

# 2. Crear carpeta del proyecto y entrar en ella
mkdir -p "$PROYECTOS_DIR/$PROYECTO"
if [ $? -ne 0 ]; then
    echo "‚ùå Error al crear la carpeta del proyecto. Saliendo."
    exit 1
fi
cd "$PROYECTOS_DIR/$PROYECTO" || { echo "‚ùå No se pudo entrar al directorio del proyecto. Saliendo."; exit 1; }

echo "üìÇ Directorio del proyecto '$PROYECTO' creado y navegando a √©l."

# 3. Estructura b√°sica de carpetas
echo "üìÅ Creando estructura b√°sica (src/, docs/)..."
mkdir -p src docs
echo "‚úÖ Estructura b√°sica creada."

# 4. Crear plantilla Markdown inicial en docs/README.md
echo "üìÑ Creando docs/README.md inicial..."
cat > docs/README.md <<EOF
# Documentaci√≥n

Aqu√≠ puedes a√±adir notas sobre el dise√±o, decisiones t√©cnicas, diagramas o referencias importantes del proyecto.

## üìÑ √çndice r√°pido

- [Estructura del c√≥digo](../src/)
- [Requisitos](#)
- [Notas](#)

> Sugerencia: puedes usar esta plantilla como punto de partida para documentaci√≥n m√°s avanzada con herramientas como MkDocs o Docusaurus.
EOF
echo "‚úÖ docs/README.md creado."

# 5. Crear README principal
echo "üìÑ Creando README.md principal..."
echo "# $PROYECTO" > README.md
echo "‚úÖ README.md principal creado."

# 6. Copiar reglas globales de Git ignore
echo "üö´ Copiando reglas de .gitignore_global si existen..."
if [ -f "$GITIGNORE_GLOBAL" ]; then
    cp "$GITIGNORE_GLOBAL" .gitignore
    echo "‚úÖ .gitignore creado desde tu configuraci√≥n global ($GITIGNORE_GLOBAL)."
else
    touch .gitignore
    echo "‚ö†Ô∏è  No se encontr√≥ el archivo .gitignore_global en '$GITIGNORE_GLOBAL'. Se cre√≥ un .gitignore vac√≠o."
fi

# 7. Inicializar Git y primer commit
echo "üì¶ Inicializando Git y realizando primer commit..."
git init > /dev/null 2>&1 # Redirigir salida a /dev/null para no mostrar "Initialized empty Git repository..."

git add . > /dev/null 2>&1 # Redirigir salida a /dev/null

# Verificar si hay cambios staged antes de intentar el commit
if git diff --cached --exit-code --quiet; then
    echo "‚ÑπÔ∏è  Git inicializado, pero no hubo cambios nuevos para el primer commit (posiblemente ya estaban en el √≠ndice)."
else
    git commit -m "üîß Estructura inicial del proyecto." > /dev/null 2>&1
    if [ $? -eq 0 ]; then
        echo "‚úÖ Primer commit realizado con √©xito."
    else
        echo "‚ö†Ô∏è  Git inicializado, pero el primer commit fall√≥. Por favor, revise manualmente el estado de Git."
    fi
fi

echo "üéâ Proyecto '$PROYECTO' creado exitosamente."
echo "Puedes empezar a trabajar en √©l en: $PROYECTOS_DIR/$PROYECTO"